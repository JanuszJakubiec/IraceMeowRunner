defmodule NQueen do
  import Nx.Defn

  @size 10

  defn evaluate(genomes) do
    # genomes =
    #  Nx.tensor([
    #    [
    #      [0, 0, 0, 1, 0, 1, 1, 0, 0, 1],
    #      [0, 0, 0, 1, 1, 0, 1, 0, 0, 1],
    #      [1, 1, 0, 1, 1, 1, 0, 1, 1, 0],
    #      [1, 1, 0, 0, 1, 1, 1, 1, 0, 1],
    #      [1, 1, 1, 0, 0, 0, 1, 0, 0, 1],
    #      [0, 1, 1, 1, 0, 0, 1, 0, 0, 1],
    #      [0, 0, 0, 1, 0, 1, 1, 0, 1, 0],
    #      [1, 1, 1, 0, 1, 1, 0, 1, 1, 1],
    #      [0, 1, 0, 0, 0, 0, 0, 0, 1, 1],
    #      [1, 0, 0, 0, 1, 0, 1, 0, 1, 0]
    #    ],
    #    [
    #      [1, 0, 0, 1, 0, 1, 1, 1, 1, 1],
    #      [1, 1, 1, 0, 0, 1, 1, 0, 0, 0],
    #      [0, 0, 0, 1, 1, 0, 0, 1, 1, 1],
    #      [1, 0, 0, 1, 0, 0, 1, 0, 0, 0],
    #      [1, 0, 1, 1, 0, 1, 0, 1, 0, 1],
    #      [1, 0, 0, 1, 1, 0, 1, 0, 1, 0],
    #      [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    #      [0, 0, 0, 1, 0, 0, 1, 0, 1, 0],
    #      [1, 1, 0, 1, 1, 0, 1, 0, 0, 1],
    #      [1, 1, 1, 1, 0, 1, 0, 0, 0, 0]
    #    ],
    #    [
    #      [1, 1, 0, 0, 1, 0, 0, 0, 0, 1],
    #      [1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    #      [0, 0, 1, 0, 0, 0, 1, 1, 0, 1],
    #      [1, 1, 1, 1, 1, 1, 0, 0, 1, 0],
    #      [0, 1, 1, 0, 1, 0, 1, 0, 0, 1],
    #      [1, 0, 1, 1, 0, 1, 0, 0, 0, 1],
    #      [0, 0, 0, 1, 1, 1, 1, 0, 1, 0],
    #      [0, 1, 1, 0, 1, 0, 1, 1, 1, 1],
    #      [0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    #      [1, 1, 0, 0, 0, 0, 1, 1, 1, 0]
    #    ],
    #    [
    #      [0, 0, 1, 0, 0, 1, 0, 1, 1, 1],
    #      [0, 1, 0, 1, 1, 1, 1, 1, 1, 1],
    #      [1, 0, 0, 1, 0, 0, 1, 0, 0, 1],
    #      [0, 0, 0, 1, 1, 0, 1, 1, 1, 1],
    #      [1, 1, 1, 0, 0, 0, 1, 1, 1, 1],
    #      [1, 1, 0, 1, 1, 0, 1, 0, 0, 0],
    #      [1, 1, 1, 0, 0, 1, 0, 0, 0, 0],
    #      [0, 0, 0, 0, 1, 0, 0, 1, 1, 0],
    #      [1, 1, 0, 1, 0, 0, 0, 1, 0, 0],
    #      [0, 0, 0, 0, 0, 0, 1, 0, 1, 1]
    #    ],
    #    [
    #      [1, 1, 0, 1, 0, 1, 1, 1, 1, 1],
    #      [0, 1, 0, 0, 0, 1, 0, 0, 1, 1],
    #      [1, 1, 0, 1, 1, 1, 0, 0, 1, 0],
    #      [0, 1, 1, 0, 0, 1, 1, 0, 0, 1],
    #      [1, 1, 0, 0, 1, 1, 0, 0, 1, 1],
    #      [0, 1, 1, 1, 1, 1, 0, 0, 1, 1],
    #      [0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
    #      [1, 0, 1, 0, 1, 1, 0, 1, 0, 0],
    #      [1, 1, 0, 0, 1, 0, 1, 1, 0, 1],
    #      [1, 1, 0, 0, 1, 1, 0, 1, 0, 1]
    #    ],
    #    [
    #      [1, 0, 1, 0, 0, 0, 1, 1, 1, 1],
    #      [1, 0, 1, 0, 1, 1, 1, 1, 0, 0],
    #      [1, 0, 1, 1, 1, 1, 0, 1, 0, 1],
    #      [0, 1, 1, 0, 1, 0, 1, 1, 0, 1],
    #      [1, 0, 1, 1, 1, 1, 0, 0, 1, 1],
    #      [0, 0, 1, 1, 1, 0, 1, 0, 1, 0],
    #      [1, 0, 1, 1, 1, 0, 1, 1, 0, 0],
    #      [1, 0, 0, 1, 0, 0, 0, 0, 1, 0],
    #      [1, 0, 0, 0, 0, 1, 0, 1, 1, 0],
    #      [0, 0, 1, 1, 1, 0, 0, 1, 1, 1]
    #    ],
    #    [
    #      [0, 1, 0, 1, 1, 0, 1, 1, 0, 1],
    #      [1, 0, 1, 0, 1, 0, 0, 0, 0, 1],
    #      [1, 1, 1, 0, 1, 0, 1, 0, 0, 0],
    #      [0, 1, 0, 0, 1, 1, 1, 1, 0, 0],
    #      [0, 1, 0, 0, 0, 1, 0, 1, 1, 0],
    #      [1, 1, 1, 1, 0, 1, 0, 0, 0, 0],
    #      [0, 0, 1, 1, 0, 0, 0, 1, 0, 1],
    #      [0, 1, 0, 0, 1, 0, 1, 0, 0, 0],
    #      [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    #      [0, 1, 0, 0, 1, 0, 0, 1, 0, 1]
    #    ],
    #    [
    #      [1, 0, 0, 0, 1, 0, 1, 1, 1, 1],
    #      [0, 0, 1, 0, 0, 0, 1, 1, 0, 0],
    #      [0, 0, 1, 1, 0, 1, 1, 0, 1, 0],
    #      [0, 1, 0, 0, 0, 0, 0, 1, 0, 1],
    #      [0, 1, 0, 1, 0, 1, 0, 0, 1, 1],
    #      [0, 0, 0, 0, 1, 0, 1, 1, 1, 1],
    #      [1, 0, 1, 0, 0, 1, 1, 1, 0, 1],
    #      [1, 0, 1, 0, 1, 0, 1, 0, 1, 1],
    #      [1, 0, 0, 1, 1, 1, 0, 0, 1, 0],
    #      [1, 0, 0, 0, 0, 1, 0, 1, 1, 1]
    #    ],
    #    [
    #      [1, 1, 0, 1, 1, 1, 0, 0, 1, 1],
    #      [0, 1, 1, 1, 0, 0, 1, 1, 0, 1],
    #      [1, 1, 0, 1, 0, 1, 0, 0, 1, 0],
    #      [1, 0, 0, 0, 0, 0, 1, 0, 1, 1],
    #      [0, 1, 0, 0, 0, 1, 1, 0, 1, 0],
    #      [1, 0, 1, 1, 0, 0, 1, 1, 0, 0],
    #      [1, 0, 0, 1, 0, 1, 1, 0, 0, 1],
    #      [1, 0, 1, 0, 1, 1, 0, 1, 0, 1],
    #      [1, 0, 0, 1, 0, 0, 1, 0, 1, 0],
    #      [1, 0, 1, 1, 0, 1, 1, 1, 1, 1]
    #    ],
    #    [
    #      [0, 1, 1, 1, 1, 0, 1, 1, 1, 0],
    #      [0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
    #      [1, 0, 1, 1, 0, 0, 0, 1, 1, 0],
    #      [0, 1, 0, 1, 1, 0, 0, 0, 0, 0],
    #      [0, 1, 1, 1, 0, 0, 0, 0, 1, 1],
    #      [1, 0, 1, 1, 0, 0, 0, 1, 0, 1],
    #      [1, 1, 0, 0, 1, 0, 1, 0, 0, 0],
    #      [1, 1, 0, 0, 0, 0, 0, 0, 1, 0],
    #      [0, 1, 1, 0, 0, 1, 0, 0, 0, 0],
    #      [0, 1, 1, 0, 0, 1, 0, 1, 0, 1]
    #    ],
    #    [
    #      [0, 1, 1, 0, 1, 0, 1, 0, 1, 1],
    #      [1, 1, 0, 0, 1, 0, 1, 0, 1, 0],
    #      [1, 0, 0, 1, 0, 0, 0, 1, 1, 0],
    #      [1, 1, 1, 1, 1, 1, 1, 0, 1, 1],
    #      [1, 0, 0, 1, 0, 1, 1, 1, 1, 0],
    #      [0, 1, 0, 0, 1, 1, 0, 0, 0, 0],
    #      [0, 0, 0, 1, 0, 0, 0, 0, 1, 1],
    #      [1, 1, 0, 1, 0, 1, 1, 1, 0, 1],
    #      [1, 1, 1, 0, 1, 1, 1, 0, 1, 0],
    #      [1, 0, 1, 1, 0, 0, 1, 1, 1, 1]
    #    ],
    #    [
    #      [1, 1, 0, 1, 0, 0, 1, 1, 0, 1],
    #      [1, 0, 0, 0, 1, 0, 1, 0, 1, 0],
    #      [0, 1, 0, 0, 1, 0, 0, 0, 1, 1],
    #      [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
    #      [1, 0, 1, 1, 1, 0, 0, 1, 1, 1],
    #      [0, 1, 0, 1, 1, 1, 0, 1, 1, 0],
    #      [0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
    #      [1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
    #      [1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    #      [0, 1, 0, 1, 1, 1, 1, 0, 1, 0]
    #    ],
    #    [
    #      [1, 0, 1, 0, 0, 0, 1, 0, 1, 0],
    #      [0, 1, 0, 1, 1, 1, 1, 0, 0, 0],
    #      [0, 1, 1, 1, 0, 1, 1, 0, 0, 1],
    #      [1, 0, 1, 0, 0, 0, 0, 0, 1, 1],
    #      [0, 0, 0, 1, 1, 1, 0, 1, 1, 1],
    #      [0, 0, 1, 0, 1, 0, 0, 1, 0, 1],
    #      [1, 1, 0, 0, 1, 0, 0, 1, 1, 1],
    #      [0, 0, 1, 1, 0, 0, 1, 1, 1, 0],
    #      [1, 1, 1, 1, 0, 1, 0, 1, 1, 1],
    #      [1, 0, 0, 0, 0, 1, 1, 0, 1, 1]
    #    ],
    #    [
    #      [1, 0, 1, 0, 0, 1, 1, 0, 0, 0],
    #      [1, 1, 1, 0, 0, 1, 1, 1, 0, 0],
    #      [1, 1, 0, 1, 1, 0, 0, 0, 1, 0],
    #      [0, 0, 0, 1, 0, 0, 0, 1, 1, 1],
    #      [1, 0, 1, 0, 0, 1, 0, 1, 1, 1],
    #      [0, 1, 0, 0, 1, 1, 0, 0, 0, 0],
    #      [1, 1, 0, 0, 0, 1, 0, 1, 0, 0],
    #      [1, 0, 1, 0, 0, 0, 1, 0, 0, 1],
    #      [0, 0, 0, 1, 0, 1, 1, 0, 1, 0],
    #      [0, 1, 1, 0, 0, 1, 1, 0, 0, 1]
    #    ],
    #    [
    #      [0, 1, 1, 1, 1, 1, 0, 0, 1, 0],
    #      [0, 1, 0, 1, 0, 1, 1, 0, 1, 0],
    #      [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
    #      [1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    #      [0, 1, 1, 0, 0, 0, 0, 0, 1, 1],
    #      [1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
    #      [0, 1, 1, 1, 0, 0, 0, 0, 1, 1],
    #      [0, 0, 1, 1, 0, 0, 0, 1, 0, 0],
    #      [1, 1, 0, 1, 1, 0, 1, 0, 0, 1],
    #      [0, 0, 1, 1, 0, 0, 1, 0, 1, 1]
    #    ],
    #    [
    #      [0, 0, 1, 0, 1, 1, 1, 0, 1, 1],
    #      [1, 0, 0, 0, 1, 1, 0, 0, 1, 1],
    #      [1, 1, 0, 0, 1, 1, 1, 0, 0, 0],
    #      [0, 0, 1, 1, 1, 0, 1, 1, 1, 0],
    #      [0, 1, 0, 0, 0, 1, 1, 1, 1, 1],
    #      [1, 1, 1, 1, 0, 1, 0, 0, 0, 0],
    #      [1, 0, 0, 0, 1, 1, 1, 1, 1, 0],
    #      [0, 0, 1, 0, 1, 0, 0, 1, 0, 0],
    #      [1, 0, 0, 1, 1, 0, 1, 1, 1, 0],
    #      [1, 0, 1, 0, 1, 0, 0, 0, 1, 1]
    #    ],
    #    [
    #      [1, 0, 0, 1, 1, 1, 0, 1, 0, 1],
    #      [1, 1, 0, 0, 0, 0, 1, 1, 1, 0],
    #      [0, 0, 1, 0, 1, 0, 1, 1, 1, 1],
    #      [1, 1, 0, 0, 0, 0, 1, 1, 1, 1],
    #      [1, 0, 0, 0, 1, 1, 0, 1, 1, 1],
    #      [0, 1, 0, 0, 0, 1, 0, 0, 1, 0],
    #      [0, 1, 0, 0, 0, 0, 1, 0, 0, 1],
    #      [0, 1, 0, 0, 0, 0, 0, 0, 1, 1],
    #      [1, 1, 0, 1, 0, 1, 1, 1, 1, 1],
    #      [0, 0, 0, 1, 0, 1, 0, 0, 0, 1]
    #    ],
    #    [
    #      [1, 1, 1, 0, 0, 1, 1, 1, 0, 1],
    #      [1, 1, 1, 0, 0, 0, 1, 1, 1, 0],
    #      [1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
    #      [1, 1, 0, 0, 1, 1, 1, 0, 1, 0],
    #      [1, 0, 0, 0, 0, 0, 0, 1, 1, 0],
    #      [1, 0, 1, 1, 1, 0, 1, 1, 0, 0],
    #      [1, 0, 1, 0, 1, 1, 0, 0, 1, 0],
    #      [1, 0, 0, 1, 0, 0, 1, 0, 1, 1],
    #      [1, 0, 0, 0, 1, 0, 1, 1, 0, 1],
    #      [1, 0, 1, 1, 1, 1, 0, 0, 1, 1]
    #    ],
    #    [
    #      [0, 1, 0, 0, 1, 0, 1, 0, 1, 0],
    #      [0, 0, 0, 1, 1, 1, 0, 0, 1, 0],
    #      [0, 1, 0, 1, 0, 1, 1, 0, 1, 1],
    #      [1, 0, 1, 1, 1, 0, 1, 1, 0, 0],
    #      [1, 1, 0, 0, 1, 0, 0, 1, 1, 0],
    #      [0, 0, 0, 0, 1, 1, 1, 0, 1, 0],
    #      [1, 0, 1, 0, 1, 1, 1, 0, 0, 1],
    #      [0, 0, 1, 1, 1, 0, 1, 1, 1, 0],
    #      [1, 1, 1, 0, 1, 0, 1, 0, 0, 1],
    #      [0, 0, 1, 1, 0, 1, 0, 0, 1, 1]
    #    ],
    #    [
    #      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    #    ]
    #  ])

    # genomes = Nx.flatten(genomes, axes: [1, 2])

    {genomes_n, _} = Nx.shape(genomes)

    genomes = Nx.reshape(genomes, {genomes_n, @size, @size})

    result =
      Nx.broadcast(Nx.tensor(0.0, type: {:f, 32}), {genomes_n})
      |> Nx.add(Nx.sum(genomes, axes: [1, 2]))

    result_to_subtract =
      Nx.broadcast(Nx.tensor(0.0, type: {:f, 32}), {genomes_n})
      |> Nx.add(count_rows(genomes))
      |> Nx.add(count_columns(genomes))
      |> Nx.add(count_diagonal(genomes))
      |> Nx.add(count_diagonal(Nx.reverse(genomes, axes: [2])))

    result - result_to_subtract
  end

  defn count_columns(genomes) do
    {genomes_n, _, _} = Nx.shape(genomes)

    Nx.sum(genomes, axes: [1])
    |> Nx.subtract(1)
    |> Nx.max(Nx.broadcast(0, {genomes_n, @size}))
    |> Nx.sum(axes: [1])
  end

  defn count_rows(genomes) do
    {genomes_n, _, _} = Nx.shape(genomes)

    Nx.sum(genomes, axes: [2])
    |> Nx.subtract(1)
    |> Nx.max(Nx.broadcast(0, {genomes_n, @size}))
    |> Nx.sum(axes: [1])
  end

  defn count_diagonal(genomes) do
    {genomes_n, _, _} = Nx.shape(genomes)

    genomes_with_added_element =
      Nx.concatenate([genomes, Nx.broadcast(0, {1, @size, @size})], axis: 0)

    first_indice = Nx.iota({2 * @size - 1, @size, 1}, axis: 1)

    second_indice =
      Nx.iota({2 * @size - 1, @size, 1}, axis: 1)
      |> Nx.add(Nx.iota({2 * @size - 1, @size, 1}, axis: 0))
      |> Nx.subtract(@size - 1)

    pred =
      check_if_indices_are_proper(second_indice, @size)
      |> Nx.broadcast({genomes_n, 2 * @size - 1, @size, 3})

    indices =
      Nx.concatenate([first_indice, second_indice], axis: 2)
      |> Nx.broadcast({genomes_n, 2 * @size - 1, @size, 2})

    indices =
      Nx.concatenate([Nx.iota({genomes_n, 2 * @size - 1, @size, 1}, axis: 0), indices], axis: 3)

    selected_indices =
      Nx.select(
        pred,
        indices,
        Nx.broadcast(Nx.tensor([genomes_n, 0, 0]), {genomes_n, 2 * @size - 1, @size, 3})
      )

    Nx.gather(genomes_with_added_element, selected_indices)
    |> Nx.sum(axes: [2])
    |> Nx.subtract(1)
    |> Nx.max(Nx.broadcast(0, {genomes_n, 2 * @size - 1}))
    |> Nx.sum(axes: [1])
  end

  defn check_if_indices_are_proper(y_indice, size) do
    y_indice >= 0 and y_indice < size
  end
end
